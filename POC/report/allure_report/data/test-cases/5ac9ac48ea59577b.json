{
  "uid" : "5ac9ac48ea59577b",
  "name" : "test_poc_homepage",
  "fullName" : "proj01_poc.test_case.case2001_check_homepage.Test_POC#test_poc_homepage",
  "historyId" : "7ec24426f1a2f38414e8abc09715d582",
  "time" : {
    "start" : 1589453559342,
    "stop" : 1589453559342,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "TypeError: setUpClass() missing 1 required positional argument: 'cls'",
  "statusTrace" : "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x000001A735CCE158>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n>           result = func()\n\ne:\\learning\\python\\lib\\site-packages\\_pytest\\runner.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ne:\\learning\\python\\lib\\site-packages\\_pytest\\runner.py:201: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\ne:\\learning\\python\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\ne:\\learning\\python\\lib\\site-packages\\pluggy\\manager.py:92: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\ne:\\learning\\python\\lib\\site-packages\\pluggy\\manager.py:86: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\ne:\\learning\\python\\lib\\site-packages\\_pytest\\runner.py:118: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\ne:\\learning\\python\\lib\\site-packages\\_pytest\\runner.py:366: in prepare\n    col.setup()\ne:\\learning\\python\\lib\\site-packages\\_pytest\\unittest.py:115: in setup\n    self._request._fillfixtures()\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:464: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:474: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:490: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:571: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:900: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\ne:\\learning\\python\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\ne:\\learning\\python\\lib\\site-packages\\pluggy\\manager.py:92: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\ne:\\learning\\python\\lib\\site-packages\\pluggy\\manager.py:86: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:949: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\ne:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py:775: in call_fixture_func\n    res = next(it)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <proj01_poc.test_case.case2001_check_homepage.Test_POC testMethod=test_poc_homepage>\nrequest = <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_poc_homepage>>\n\n    @pytest.fixture(scope=scope, autouse=True)\n    def fixture(self, request):\n        if getattr(self, \"__unittest_skip__\", None):\n            reason = self.__unittest_skip_why__\n            pytest.skip(reason)\n        if setup is not None:\n            if pass_self:\n                setup(self, request.function)\n            else:\n>               setup()\nE               TypeError: setUpClass() missing 1 required positional argument: 'cls'\n\ne:\\learning\\python\\lib\\site-packages\\_pytest\\unittest.py:95: TypeError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1589453559345,
      "stop" : 1589453559345,
      "duration" : 0
    },
    "status" : "broken",
    "statusMessage" : "TypeError: setUpClass() missing 1 required positional argument: 'cls'\n",
    "statusTrace" : "  File \"e:\\learning\\python\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"e:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py\", line 949, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"e:\\learning\\python\\lib\\site-packages\\_pytest\\fixtures.py\", line 775, in call_fixture_func\n    res = next(it)\n  File \"e:\\learning\\python\\lib\\site-packages\\_pytest\\unittest.py\", line 95, in fixture\n    setup()\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "visit home page"
  }, {
    "name" : "feature",
    "value" : "check home page"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "proj01_poc.test_case"
  }, {
    "name" : "suite",
    "value" : "case2001_check_homepage"
  }, {
    "name" : "subSuite",
    "value" : "Test_POC"
  }, {
    "name" : "host",
    "value" : "USER-20190323YT"
  }, {
    "name" : "thread",
    "value" : "10772-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "proj01_poc.test_case.case2001_check_homepage"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "smoke" ]
  },
  "source" : "5ac9ac48ea59577b.json",
  "parameterValues" : [ ]
}